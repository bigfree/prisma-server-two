# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateLabel {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

"""Auth payload"""
type Auth {
  token: String!
  user: User!
}

"""SignUp input data"""
input AuthInput {
  email: String!
  name: String
  password: String!
}

type BatchPayload {
  count: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

type Label {
  createdAt: DateTime!
  id: String!
  name: String!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskDistinctFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
}

input LabelCreateInput {
  createdAt: DateTime
  id: String
  name: String!
  tasks: TaskCreateManyWithoutLabelsInput
}

input LabelCreateManyWithoutTasksInput {
  connect: [LabelWhereUniqueInput!]
  connectOrCreate: [LabelCreateOrConnectWithouttasksInput!]
  create: [LabelCreateWithoutTasksInput!]
}

input LabelCreateOrConnectWithouttasksInput {
  create: LabelCreateWithoutTasksInput!
  where: LabelWhereUniqueInput!
}

input LabelCreateWithoutTasksInput {
  createdAt: DateTime
  id: String
  name: String!
}

enum LabelDistinctFieldEnum {
  createdAt
  id
  name
}

input LabelListRelationFilter {
  every: LabelWhereInput
  none: LabelWhereInput
  some: LabelWhereInput
}

input LabelOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input LabelScalarWhereInput {
  AND: [LabelScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [LabelScalarWhereInput!]
  OR: [LabelScalarWhereInput!]
}

input LabelUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutLabelsInput
}

input LabelUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateManyWithoutTasksInput {
  connect: [LabelWhereUniqueInput!]
  connectOrCreate: [LabelCreateOrConnectWithouttasksInput!]
  create: [LabelCreateWithoutTasksInput!]
  delete: [LabelWhereUniqueInput!]
  deleteMany: [LabelScalarWhereInput!]
  disconnect: [LabelWhereUniqueInput!]
  set: [LabelWhereUniqueInput!]
  update: [LabelUpdateWithWhereUniqueWithoutTasksInput!]
  updateMany: [LabelUpdateManyWithWhereWithoutTasksInput!]
  upsert: [LabelUpsertWithWhereUniqueWithoutTasksInput!]
}

input LabelUpdateManyWithWhereWithoutTasksInput {
  data: LabelUpdateManyMutationInput!
  where: LabelScalarWhereInput!
}

input LabelUpdateWithoutTasksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateWithWhereUniqueWithoutTasksInput {
  data: LabelUpdateWithoutTasksInput!
  where: LabelWhereUniqueInput!
}

input LabelUpsertWithWhereUniqueWithoutTasksInput {
  create: LabelCreateWithoutTasksInput!
  update: LabelUpdateWithoutTasksInput!
  where: LabelWhereUniqueInput!
}

input LabelWhereInput {
  AND: [LabelWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  tasks: TaskListRelationFilter
}

input LabelWhereUniqueInput {
  id: String
  name: String
}

type Mutation {
  createLabel(data: LabelCreateInput!): Label!
  createTask(data: TaskCreateInput!): Task!
  createUser(data: UserCreateInput!): User!
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteManyLabel(where: LabelWhereInput): BatchPayload!
  deleteManyTask(where: TaskWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteUser(where: UserWhereUniqueInput!): User
  login(data: AuthInput!): Auth!
  signup(data: AuthInput!): Auth!
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateManyLabel(data: LabelUpdateManyMutationInput!, where: LabelWhereInput): BatchPayload!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertLabel(create: LabelCreateInput!, update: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label!
  upsertTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  aggregateLabel(cursor: LabelWhereUniqueInput, distinct: [LabelDistinctFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): AggregateLabel!
  aggregateTask(cursor: TaskWhereUniqueInput, distinct: [TaskDistinctFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstLabel(cursor: LabelWhereUniqueInput, distinct: [LabelDistinctFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): Label
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskDistinctFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  label(where: LabelWhereUniqueInput!): Label
  labels(cursor: LabelWhereUniqueInput, distinct: [LabelDistinctFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskDistinctFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  USER
  WORKSPACEADMIN
  WORKSPACEOWNER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  archiveAt: DateTime
  content: String
  createdAt: DateTime!
  deletedAt: DateTime
  id: String!
  labels(cursor: LabelWhereUniqueInput, distinct: [LabelDistinctFieldEnum!], orderBy: [LabelOrderByInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]
  name: String!
  updatedAt: DateTime
  user: User!
  userId: String!
}

input TaskCreateInput {
  archiveAt: DateTime
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  labels: LabelCreateManyWithoutTasksInput
  name: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutTasksInput!
}

input TaskCreateManyWithoutLabelsInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutlabelsInput!]
  create: [TaskCreateWithoutLabelsInput!]
}

input TaskCreateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutuserInput!]
  create: [TaskCreateWithoutUserInput!]
}

input TaskCreateOrConnectWithoutlabelsInput {
  create: TaskCreateWithoutLabelsInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutuserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutLabelsInput {
  archiveAt: DateTime
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutTasksInput!
}

input TaskCreateWithoutUserInput {
  archiveAt: DateTime
  content: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  labels: LabelCreateManyWithoutTasksInput
  name: String!
  updatedAt: DateTime
}

enum TaskDistinctFieldEnum {
  archiveAt
  content
  createdAt
  deletedAt
  id
  name
  updatedAt
  userId
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskOrderByInput {
  archiveAt: SortOrder
  content: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  archiveAt: DateTimeNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input TaskUpdateInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labels: LabelUpdateManyWithoutTasksInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateManyMutationInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithoutLabelsInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutlabelsInput!]
  create: [TaskCreateWithoutLabelsInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutLabelsInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutLabelsInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutLabelsInput!]
}

input TaskUpdateManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutuserInput!]
  create: [TaskCreateWithoutUserInput!]
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateManyWithWhereWithoutLabelsInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateWithoutLabelsInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTasksInput
}

input TaskUpdateWithoutUserInput {
  archiveAt: NullableDateTimeFieldUpdateOperationsInput
  content: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labels: LabelUpdateManyWithoutTasksInput
  name: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithWhereUniqueWithoutLabelsInput {
  data: TaskUpdateWithoutLabelsInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutLabelsInput {
  create: TaskCreateWithoutLabelsInput!
  update: TaskUpdateWithoutLabelsInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  archiveAt: DateTimeNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: StringFilter
  labels: LabelListRelationFilter
  name: StringFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  updatedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input TaskWhereUniqueInput {
  id: String
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  id: String!
  name: String
  password: String!
  role: Role!
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskDistinctFieldEnum!], orderBy: [TaskOrderByInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]
  updatedAt: DateTime
}

input UserCreateInput {
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  id: String
  name: String
  password: String!
  role: Role
  tasks: TaskCreateManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateOneWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithouttasksInput
  create: UserCreateWithoutTasksInput
}

input UserCreateOrConnectWithouttasksInput {
  create: UserCreateWithoutTasksInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTasksInput {
  createdAt: DateTime
  deletedAt: DateTime
  email: String!
  id: String
  name: String
  password: String!
  role: Role
  updatedAt: DateTime
}

enum UserDistinctFieldEnum {
  createdAt
  deletedAt
  email
  id
  name
  password
  role
  updatedAt
}

input UserOrderByInput {
  createdAt: SortOrder
  deletedAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutUserInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutTasksInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithouttasksInput
  create: UserCreateWithoutTasksInput
  update: UserUpdateWithoutTasksInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateWithoutTasksInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutTasksInput {
  create: UserCreateWithoutTasksInput!
  update: UserUpdateWithoutTasksInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  email: StringFilter
  id: StringFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  role: EnumRoleFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
